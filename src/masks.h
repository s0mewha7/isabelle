#ifndef MASKS_H
#define MASKS_H

#include "types.h"

extern uint64_t bishopBlockerMasks[SQUARE_NUM];
extern uint64_t rookBlockerMasks[SQUARE_NUM];

extern uint64_t pawnAdvanceMasks[8][2];
extern uint64_t neighborFileMasks[8];
extern uint64_t passedPawnMasks[SQUARE_NUM][2];
extern uint64_t squareColorMasks[2]; // Dark squares, light squares
extern uint64_t kingRing[SQUARE_NUM];

extern uint64_t bishopMoves[5248];
extern uint64_t rookMoves[102400];

// A magic bitboard approach is a hashing algorithm used for indexing a attack databse for bishops and rooks
// For more information, see https://www.chessprogramming.org/Magic_Bitboards
// We use 'fancy' magic bitboards to eliminate redundancies and hence table size by maximizing constructive hash collisions
// All magic numbers below are generated by Pradu Kannan and can be found in many other open-source chess engines (e.g. Crafty)

static constexpr uint64_t bishopMagics[SQUARE_NUM] = {
  0x0002020202020200ull, 0x0002020202020000ull, 0x0004010202000000ull,
  0x0004040080000000ull, 0x0001104000000000ull, 0x0000821040000000ull,
  0x0000410410400000ull, 0x0000104104104000ull, 0x0000040404040400ull,
  0x0000020202020200ull, 0x0000040102020000ull, 0x0000040400800000ull,
  0x0000011040000000ull, 0x0000008210400000ull, 0x0000004104104000ull,
  0x0000002082082000ull, 0x0004000808080800ull, 0x0002000404040400ull,
  0x0001000202020200ull, 0x0000800802004000ull, 0x0000800400A00000ull,
  0x0000200100884000ull, 0x0000400082082000ull, 0x0000200041041000ull,
  0x0002080010101000ull, 0x0001040008080800ull, 0x0000208004010400ull,
  0x0000404004010200ull, 0x0000840000802000ull, 0x0000404002011000ull,
  0x0000808001041000ull, 0x0000404000820800ull, 0x0001041000202000ull,
  0x0000820800101000ull, 0x0000104400080800ull, 0x0000020080080080ull,
  0x0000404040040100ull, 0x0000808100020100ull, 0x0001010100020800ull,
  0x0000808080010400ull, 0x0000820820004000ull, 0x0000410410002000ull,
  0x0000082088001000ull, 0x0000002011000800ull, 0x0000080100400400ull,
  0x0001010101000200ull, 0x0002020202000400ull, 0x0001010101000200ull,
  0x0000410410400000ull, 0x0000208208200000ull, 0x0000002084100000ull,
  0x0000000020880000ull, 0x0000001002020000ull, 0x0000040408020000ull,
  0x0004040404040000ull, 0x0002020202020000ull, 0x0000104104104000ull,
  0x0000002082082000ull, 0x0000000020841000ull, 0x0000000000208800ull,
  0x0000000010020200ull, 0x0000000404080200ull, 0x0000040404040400ull,
  0x0002020202020200ull
};

static constexpr uint64_t rookMagics[SQUARE_NUM] = {
  0x0080001020400080ull, 0x0040001000200040ull, 0x0080081000200080ull,
  0x0080040800100080ull, 0x0080020400080080ull, 0x0080010200040080ull,
  0x0080008001000200ull, 0x0080002040800100ull, 0x0000800020400080ull,
  0x0000400020005000ull, 0x0000801000200080ull, 0x0000800800100080ull,
  0x0000800400080080ull, 0x0000800200040080ull, 0x0000800100020080ull,
  0x0000800040800100ull, 0x0000208000400080ull, 0x0000404000201000ull,
  0x0000808010002000ull, 0x0000808008001000ull, 0x0000808004000800ull,
  0x0000808002000400ull, 0x0000010100020004ull, 0x0000020000408104ull,
  0x0000208080004000ull, 0x0000200040005000ull, 0x0000100080200080ull,
  0x0000080080100080ull, 0x0000040080080080ull, 0x0000020080040080ull,
  0x0000010080800200ull, 0x0000800080004100ull, 0x0000204000800080ull,
  0x0000200040401000ull, 0x0000100080802000ull, 0x0000080080801000ull,
  0x0000040080800800ull, 0x0000020080800400ull, 0x0000020001010004ull,
  0x0000800040800100ull, 0x0000204000808000ull, 0x0000200040008080ull,
  0x0000100020008080ull, 0x0000080010008080ull, 0x0000040008008080ull,
  0x0000020004008080ull, 0x0000010002008080ull, 0x0000004081020004ull,
  0x0000204000800080ull, 0x0000200040008080ull, 0x0000100020008080ull,
  0x0000080010008080ull, 0x0000040008008080ull, 0x0000020004008080ull,
  0x0000800100020080ull, 0x0000800041000080ull, 0x00FFFCDDFCED714Aull,
  0x007FFCDDFCED714Aull, 0x003FFFCDFFD88096ull, 0x0000040810002101ull,
  0x0001000204080011ull, 0x0001000204000801ull, 0x0001000082000401ull,
  0x0001FFFAABFAD1A2ull
};


static constexpr int bishopMagicShifts[SQUARE_NUM] = {
	58, 59, 59, 59, 59, 59, 59, 58,
	59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 57, 57, 57, 57, 59, 59,
	59, 59, 57, 55, 55, 57, 59, 59,
	59, 59, 57, 55, 55, 57, 59, 59,
	59, 59, 57, 57, 57, 57, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59,
	58, 59, 59, 59, 59, 59, 59, 58
};

static constexpr int rookMagicShifts[SQUARE_NUM] = {
	52, 53, 53, 53, 53, 53, 53, 52,
	53, 54, 54, 54, 54, 54, 54, 53,
	53, 54, 54, 54, 54, 54, 54, 53,
	53, 54, 54, 54, 54, 54, 54, 53,
	53, 54, 54, 54, 54, 54, 54, 53,
	53, 54, 54, 54, 54, 54, 54, 53,
	53, 54, 54, 54, 54, 54, 54, 53,
	53, 54, 54, 53, 53, 53, 53, 53
};

static constexpr uint64_t *bishopMagicIndexIncrements[SQUARE_NUM] =
{
	bishopMoves + 4992, bishopMoves + 2624, bishopMoves + 256,  bishopMoves + 896,
  bishopMoves + 1280, bishopMoves + 1664, bishopMoves + 4800, bishopMoves + 5120,
	bishopMoves + 2560, bishopMoves + 2656, bishopMoves + 288,  bishopMoves + 928,
  bishopMoves + 1312, bishopMoves + 1696, bishopMoves + 4832, bishopMoves + 4928,
	bishopMoves + 0,    bishopMoves + 128,  bishopMoves + 320,  bishopMoves + 960,
  bishopMoves + 1344, bishopMoves + 1728, bishopMoves + 2304, bishopMoves + 2432,
	bishopMoves + 32,   bishopMoves + 160,  bishopMoves + 448,  bishopMoves + 2752,
  bishopMoves + 3776, bishopMoves + 1856, bishopMoves + 2336, bishopMoves + 2464,
	bishopMoves + 64,   bishopMoves + 192,  bishopMoves + 576,  bishopMoves + 3264,
  bishopMoves + 4288, bishopMoves + 1984, bishopMoves + 2368, bishopMoves + 2496,
	bishopMoves + 96,   bishopMoves + 224,  bishopMoves + 704,  bishopMoves + 1088,
  bishopMoves + 1472, bishopMoves + 2112, bishopMoves + 2400, bishopMoves + 2528,
	bishopMoves + 2592, bishopMoves + 2688, bishopMoves + 832,  bishopMoves + 1216,
  bishopMoves + 1600, bishopMoves + 2240, bishopMoves + 4864, bishopMoves + 4960,
	bishopMoves + 5056, bishopMoves + 2720, bishopMoves + 864,  bishopMoves + 1248,
  bishopMoves + 1632, bishopMoves + 2272, bishopMoves + 4896, bishopMoves + 5184
};

static constexpr uint64_t *rookMagicIndexIncrements[SQUARE_NUM] =
{
	rookMoves + 86016, rookMoves + 73728, rookMoves + 36864, rookMoves + 43008,
	rookMoves + 47104, rookMoves + 51200, rookMoves + 77824, rookMoves + 94208,
	rookMoves + 69632, rookMoves + 32768, rookMoves + 38912, rookMoves + 10240,
	rookMoves + 14336, rookMoves + 53248, rookMoves + 57344, rookMoves + 81920,
	rookMoves + 24576, rookMoves + 33792, rookMoves + 6144,  rookMoves + 11264,
	rookMoves + 15360, rookMoves + 18432, rookMoves + 58368, rookMoves + 61440,
	rookMoves + 26624, rookMoves + 4096,  rookMoves + 7168,  rookMoves + 0,
	rookMoves + 2048,  rookMoves + 19456, rookMoves + 22528, rookMoves + 63488,
	rookMoves + 28672, rookMoves + 5120,  rookMoves + 8192,  rookMoves + 1024,
	rookMoves + 3072,  rookMoves + 20480, rookMoves + 23552, rookMoves + 65536,
	rookMoves + 30720, rookMoves + 34816, rookMoves + 9216,  rookMoves + 12288,
	rookMoves + 16384, rookMoves + 21504, rookMoves + 59392, rookMoves + 67584,
	rookMoves + 71680, rookMoves + 35840, rookMoves + 39936, rookMoves + 13312,
	rookMoves + 17408, rookMoves + 54272, rookMoves + 60416, rookMoves + 83968,
	rookMoves + 90112, rookMoves + 75776, rookMoves + 40960, rookMoves + 45056,
	rookMoves + 49152, rookMoves + 55296, rookMoves + 79872, rookMoves + 98304
};

void initBishopBlockerMasks();
void initRookBlockerMasks();

void initBishopMagics();
void initRookMagics();

void initPawnAdvanceMasks();
void initNeighborFileMasks();
void initPassedPawnMasks();
void initSquareColorMasks();
void initKingRing();

void initMasks();

#define getBishopMagic(occ, sqr) *((((occ & bishopBlockerMasks[sqr]) * bishopMagics[sqr]) >> bishopMagicShifts[sqr]) + bishopMagicIndexIncrements[sqr])
#define getRookMagic(occ, sqr) *((((occ & rookBlockerMasks[sqr]) * rookMagics[sqr]) >> rookMagicShifts[sqr]) + rookMagicIndexIncrements[sqr])

#endif